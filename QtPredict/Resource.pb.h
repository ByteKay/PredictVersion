// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Resource.proto

#ifndef PROTOBUF_Resource_2eproto__INCLUDED
#define PROTOBUF_Resource_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_Resource_2eproto();
void protobuf_AssignDesc_Resource_2eproto();
void protobuf_ShutdownFile_Resource_2eproto();

class ResourceIndex;
class ServerConfig;

enum ServerConfig_FILETYPE {
  ServerConfig_FILETYPE_UNZIP = 0,
  ServerConfig_FILETYPE_ZIP = 1
};
bool ServerConfig_FILETYPE_IsValid(int value);
const ServerConfig_FILETYPE ServerConfig_FILETYPE_FILETYPE_MIN = ServerConfig_FILETYPE_UNZIP;
const ServerConfig_FILETYPE ServerConfig_FILETYPE_FILETYPE_MAX = ServerConfig_FILETYPE_ZIP;
const int ServerConfig_FILETYPE_FILETYPE_ARRAYSIZE = ServerConfig_FILETYPE_FILETYPE_MAX + 1;

// ===================================================================

class ResourceIndex : public ::google::protobuf::MessageLite {
 public:
  ResourceIndex();
  virtual ~ResourceIndex();

  ResourceIndex(const ResourceIndex& from);

  inline ResourceIndex& operator=(const ResourceIndex& from) {
    CopyFrom(from);
    return *this;
  }

  static const ResourceIndex& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const ResourceIndex* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(ResourceIndex* other);

  // implements Message ----------------------------------------------

  ResourceIndex* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const ResourceIndex& from);
  void MergeFrom(const ResourceIndex& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 key = 1;
  inline bool has_key() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 1;
  inline ::google::protobuf::int64 key() const;
  inline void set_key(::google::protobuf::int64 value);

  // required string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // required int32 offset = 3;
  inline bool has_offset() const;
  inline void clear_offset();
  static const int kOffsetFieldNumber = 3;
  inline ::google::protobuf::int32 offset() const;
  inline void set_offset(::google::protobuf::int32 value);

  // required int32 size = 4;
  inline bool has_size() const;
  inline void clear_size();
  static const int kSizeFieldNumber = 4;
  inline ::google::protobuf::int32 size() const;
  inline void set_size(::google::protobuf::int32 value);

  // optional int32 IsPicture = 5;
  inline bool has_ispicture() const;
  inline void clear_ispicture();
  static const int kIsPictureFieldNumber = 5;
  inline ::google::protobuf::int32 ispicture() const;
  inline void set_ispicture(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ResourceIndex)
 private:
  inline void set_has_key();
  inline void clear_has_key();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_offset();
  inline void clear_has_offset();
  inline void set_has_size();
  inline void clear_has_size();
  inline void set_has_ispicture();
  inline void clear_has_ispicture();

  ::google::protobuf::int64 key_;
  ::std::string* name_;
  ::google::protobuf::int32 offset_;
  ::google::protobuf::int32 size_;
  ::google::protobuf::int32 ispicture_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_Resource_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_Resource_2eproto();
  #endif
  friend void protobuf_AssignDesc_Resource_2eproto();
  friend void protobuf_ShutdownFile_Resource_2eproto();

  void InitAsDefaultInstance();
  static ResourceIndex* default_instance_;
};
// -------------------------------------------------------------------

class ServerConfig : public ::google::protobuf::MessageLite {
 public:
  ServerConfig();
  virtual ~ServerConfig();

  ServerConfig(const ServerConfig& from);

  inline ServerConfig& operator=(const ServerConfig& from) {
    CopyFrom(from);
    return *this;
  }

  static const ServerConfig& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const ServerConfig* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(ServerConfig* other);

  // implements Message ----------------------------------------------

  ServerConfig* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const ServerConfig& from);
  void MergeFrom(const ServerConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  typedef ServerConfig_FILETYPE FILETYPE;
  static const FILETYPE UNZIP = ServerConfig_FILETYPE_UNZIP;
  static const FILETYPE ZIP = ServerConfig_FILETYPE_ZIP;
  static inline bool FILETYPE_IsValid(int value) {
    return ServerConfig_FILETYPE_IsValid(value);
  }
  static const FILETYPE FILETYPE_MIN =
    ServerConfig_FILETYPE_FILETYPE_MIN;
  static const FILETYPE FILETYPE_MAX =
    ServerConfig_FILETYPE_FILETYPE_MAX;
  static const int FILETYPE_ARRAYSIZE =
    ServerConfig_FILETYPE_FILETYPE_ARRAYSIZE;

  // accessors -------------------------------------------------------

  // required string version = 1;
  inline bool has_version() const;
  inline void clear_version();
  static const int kVersionFieldNumber = 1;
  inline const ::std::string& version() const;
  inline void set_version(const ::std::string& value);
  inline void set_version(const char* value);
  inline void set_version(const char* value, size_t size);
  inline ::std::string* mutable_version();
  inline ::std::string* release_version();
  inline void set_allocated_version(::std::string* version);

  // required string packagename = 2;
  inline bool has_packagename() const;
  inline void clear_packagename();
  static const int kPackagenameFieldNumber = 2;
  inline const ::std::string& packagename() const;
  inline void set_packagename(const ::std::string& value);
  inline void set_packagename(const char* value);
  inline void set_packagename(const char* value, size_t size);
  inline ::std::string* mutable_packagename();
  inline ::std::string* release_packagename();
  inline void set_allocated_packagename(::std::string* packagename);

  // required string url = 3;
  inline bool has_url() const;
  inline void clear_url();
  static const int kUrlFieldNumber = 3;
  inline const ::std::string& url() const;
  inline void set_url(const ::std::string& value);
  inline void set_url(const char* value);
  inline void set_url(const char* value, size_t size);
  inline ::std::string* mutable_url();
  inline ::std::string* release_url();
  inline void set_allocated_url(::std::string* url);

  // optional .ServerConfig.FILETYPE filetype = 4 [default = UNZIP];
  inline bool has_filetype() const;
  inline void clear_filetype();
  static const int kFiletypeFieldNumber = 4;
  inline ::ServerConfig_FILETYPE filetype() const;
  inline void set_filetype(::ServerConfig_FILETYPE value);

  // repeated .ResourceIndex index = 5;
  inline int index_size() const;
  inline void clear_index();
  static const int kIndexFieldNumber = 5;
  inline const ::ResourceIndex& index(int index) const;
  inline ::ResourceIndex* mutable_index(int index);
  inline ::ResourceIndex* add_index();
  inline const ::google::protobuf::RepeatedPtrField< ::ResourceIndex >&
      index() const;
  inline ::google::protobuf::RepeatedPtrField< ::ResourceIndex >*
      mutable_index();

  // @@protoc_insertion_point(class_scope:ServerConfig)
 private:
  inline void set_has_version();
  inline void clear_has_version();
  inline void set_has_packagename();
  inline void clear_has_packagename();
  inline void set_has_url();
  inline void clear_has_url();
  inline void set_has_filetype();
  inline void clear_has_filetype();

  ::std::string* version_;
  ::std::string* packagename_;
  ::std::string* url_;
  ::google::protobuf::RepeatedPtrField< ::ResourceIndex > index_;
  int filetype_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_Resource_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_Resource_2eproto();
  #endif
  friend void protobuf_AssignDesc_Resource_2eproto();
  friend void protobuf_ShutdownFile_Resource_2eproto();

  void InitAsDefaultInstance();
  static ServerConfig* default_instance_;
};
// ===================================================================


// ===================================================================

// ResourceIndex

// required int64 key = 1;
inline bool ResourceIndex::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResourceIndex::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ResourceIndex::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ResourceIndex::clear_key() {
  key_ = GOOGLE_LONGLONG(0);
  clear_has_key();
}
inline ::google::protobuf::int64 ResourceIndex::key() const {
  return key_;
}
inline void ResourceIndex::set_key(::google::protobuf::int64 value) {
  set_has_key();
  key_ = value;
}

// required string name = 2;
inline bool ResourceIndex::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ResourceIndex::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ResourceIndex::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ResourceIndex::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& ResourceIndex::name() const {
  return *name_;
}
inline void ResourceIndex::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void ResourceIndex::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void ResourceIndex::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ResourceIndex::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* ResourceIndex::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ResourceIndex::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 offset = 3;
inline bool ResourceIndex::has_offset() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ResourceIndex::set_has_offset() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ResourceIndex::clear_has_offset() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ResourceIndex::clear_offset() {
  offset_ = 0;
  clear_has_offset();
}
inline ::google::protobuf::int32 ResourceIndex::offset() const {
  return offset_;
}
inline void ResourceIndex::set_offset(::google::protobuf::int32 value) {
  set_has_offset();
  offset_ = value;
}

// required int32 size = 4;
inline bool ResourceIndex::has_size() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ResourceIndex::set_has_size() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ResourceIndex::clear_has_size() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ResourceIndex::clear_size() {
  size_ = 0;
  clear_has_size();
}
inline ::google::protobuf::int32 ResourceIndex::size() const {
  return size_;
}
inline void ResourceIndex::set_size(::google::protobuf::int32 value) {
  set_has_size();
  size_ = value;
}

// optional int32 IsPicture = 5;
inline bool ResourceIndex::has_ispicture() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ResourceIndex::set_has_ispicture() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ResourceIndex::clear_has_ispicture() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ResourceIndex::clear_ispicture() {
  ispicture_ = 0;
  clear_has_ispicture();
}
inline ::google::protobuf::int32 ResourceIndex::ispicture() const {
  return ispicture_;
}
inline void ResourceIndex::set_ispicture(::google::protobuf::int32 value) {
  set_has_ispicture();
  ispicture_ = value;
}

// -------------------------------------------------------------------

// ServerConfig

// required string version = 1;
inline bool ServerConfig::has_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ServerConfig::set_has_version() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ServerConfig::clear_has_version() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ServerConfig::clear_version() {
  if (version_ != &::google::protobuf::internal::kEmptyString) {
    version_->clear();
  }
  clear_has_version();
}
inline const ::std::string& ServerConfig::version() const {
  return *version_;
}
inline void ServerConfig::set_version(const ::std::string& value) {
  set_has_version();
  if (version_ == &::google::protobuf::internal::kEmptyString) {
    version_ = new ::std::string;
  }
  version_->assign(value);
}
inline void ServerConfig::set_version(const char* value) {
  set_has_version();
  if (version_ == &::google::protobuf::internal::kEmptyString) {
    version_ = new ::std::string;
  }
  version_->assign(value);
}
inline void ServerConfig::set_version(const char* value, size_t size) {
  set_has_version();
  if (version_ == &::google::protobuf::internal::kEmptyString) {
    version_ = new ::std::string;
  }
  version_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ServerConfig::mutable_version() {
  set_has_version();
  if (version_ == &::google::protobuf::internal::kEmptyString) {
    version_ = new ::std::string;
  }
  return version_;
}
inline ::std::string* ServerConfig::release_version() {
  clear_has_version();
  if (version_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = version_;
    version_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ServerConfig::set_allocated_version(::std::string* version) {
  if (version_ != &::google::protobuf::internal::kEmptyString) {
    delete version_;
  }
  if (version) {
    set_has_version();
    version_ = version;
  } else {
    clear_has_version();
    version_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string packagename = 2;
inline bool ServerConfig::has_packagename() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ServerConfig::set_has_packagename() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ServerConfig::clear_has_packagename() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ServerConfig::clear_packagename() {
  if (packagename_ != &::google::protobuf::internal::kEmptyString) {
    packagename_->clear();
  }
  clear_has_packagename();
}
inline const ::std::string& ServerConfig::packagename() const {
  return *packagename_;
}
inline void ServerConfig::set_packagename(const ::std::string& value) {
  set_has_packagename();
  if (packagename_ == &::google::protobuf::internal::kEmptyString) {
    packagename_ = new ::std::string;
  }
  packagename_->assign(value);
}
inline void ServerConfig::set_packagename(const char* value) {
  set_has_packagename();
  if (packagename_ == &::google::protobuf::internal::kEmptyString) {
    packagename_ = new ::std::string;
  }
  packagename_->assign(value);
}
inline void ServerConfig::set_packagename(const char* value, size_t size) {
  set_has_packagename();
  if (packagename_ == &::google::protobuf::internal::kEmptyString) {
    packagename_ = new ::std::string;
  }
  packagename_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ServerConfig::mutable_packagename() {
  set_has_packagename();
  if (packagename_ == &::google::protobuf::internal::kEmptyString) {
    packagename_ = new ::std::string;
  }
  return packagename_;
}
inline ::std::string* ServerConfig::release_packagename() {
  clear_has_packagename();
  if (packagename_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = packagename_;
    packagename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ServerConfig::set_allocated_packagename(::std::string* packagename) {
  if (packagename_ != &::google::protobuf::internal::kEmptyString) {
    delete packagename_;
  }
  if (packagename) {
    set_has_packagename();
    packagename_ = packagename;
  } else {
    clear_has_packagename();
    packagename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string url = 3;
inline bool ServerConfig::has_url() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ServerConfig::set_has_url() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ServerConfig::clear_has_url() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ServerConfig::clear_url() {
  if (url_ != &::google::protobuf::internal::kEmptyString) {
    url_->clear();
  }
  clear_has_url();
}
inline const ::std::string& ServerConfig::url() const {
  return *url_;
}
inline void ServerConfig::set_url(const ::std::string& value) {
  set_has_url();
  if (url_ == &::google::protobuf::internal::kEmptyString) {
    url_ = new ::std::string;
  }
  url_->assign(value);
}
inline void ServerConfig::set_url(const char* value) {
  set_has_url();
  if (url_ == &::google::protobuf::internal::kEmptyString) {
    url_ = new ::std::string;
  }
  url_->assign(value);
}
inline void ServerConfig::set_url(const char* value, size_t size) {
  set_has_url();
  if (url_ == &::google::protobuf::internal::kEmptyString) {
    url_ = new ::std::string;
  }
  url_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ServerConfig::mutable_url() {
  set_has_url();
  if (url_ == &::google::protobuf::internal::kEmptyString) {
    url_ = new ::std::string;
  }
  return url_;
}
inline ::std::string* ServerConfig::release_url() {
  clear_has_url();
  if (url_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = url_;
    url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ServerConfig::set_allocated_url(::std::string* url) {
  if (url_ != &::google::protobuf::internal::kEmptyString) {
    delete url_;
  }
  if (url) {
    set_has_url();
    url_ = url;
  } else {
    clear_has_url();
    url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional .ServerConfig.FILETYPE filetype = 4 [default = UNZIP];
inline bool ServerConfig::has_filetype() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ServerConfig::set_has_filetype() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ServerConfig::clear_has_filetype() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ServerConfig::clear_filetype() {
  filetype_ = 0;
  clear_has_filetype();
}
inline ::ServerConfig_FILETYPE ServerConfig::filetype() const {
  return static_cast< ::ServerConfig_FILETYPE >(filetype_);
}
inline void ServerConfig::set_filetype(::ServerConfig_FILETYPE value) {
  assert(::ServerConfig_FILETYPE_IsValid(value));
  set_has_filetype();
  filetype_ = value;
}

// repeated .ResourceIndex index = 5;
inline int ServerConfig::index_size() const {
  return index_.size();
}
inline void ServerConfig::clear_index() {
  index_.Clear();
}
inline const ::ResourceIndex& ServerConfig::index(int index) const {
  return index_.Get(index);
}
inline ::ResourceIndex* ServerConfig::mutable_index(int index) {
  return index_.Mutable(index);
}
inline ::ResourceIndex* ServerConfig::add_index() {
  return index_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ResourceIndex >&
ServerConfig::index() const {
  return index_;
}
inline ::google::protobuf::RepeatedPtrField< ::ResourceIndex >*
ServerConfig::mutable_index() {
  return &index_;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Resource_2eproto__INCLUDED
