// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ccgamec_config.proto

#ifndef PROTOBUF_ccgamec_5fconfig_2eproto__INCLUDED
#define PROTOBUF_ccgamec_5fconfig_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_ccgamec_5fconfig_2eproto();
void protobuf_AssignDesc_ccgamec_5fconfig_2eproto();
void protobuf_ShutdownFile_ccgamec_5fconfig_2eproto();

class Resource;
class RPFile;
class PDFile;
class ToolConfig;
class ServerConfig;

// ===================================================================

class Resource : public ::google::protobuf::MessageLite {
 public:
  Resource();
  virtual ~Resource();

  Resource(const Resource& from);

  inline Resource& operator=(const Resource& from) {
    CopyFrom(from);
    return *this;
  }

  static const Resource& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const Resource* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(Resource* other);

  // implements Message ----------------------------------------------

  Resource* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const Resource& from);
  void MergeFrom(const Resource& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string key = 1;
  inline bool has_key() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 1;
  inline const ::std::string& key() const;
  inline void set_key(const ::std::string& value);
  inline void set_key(const char* value);
  inline void set_key(const char* value, size_t size);
  inline ::std::string* mutable_key();
  inline ::std::string* release_key();
  inline void set_allocated_key(::std::string* key);

  // required string path = 2;
  inline bool has_path() const;
  inline void clear_path();
  static const int kPathFieldNumber = 2;
  inline const ::std::string& path() const;
  inline void set_path(const ::std::string& value);
  inline void set_path(const char* value);
  inline void set_path(const char* value, size_t size);
  inline ::std::string* mutable_path();
  inline ::std::string* release_path();
  inline void set_allocated_path(::std::string* path);

  // optional string type = 3;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 3;
  inline const ::std::string& type() const;
  inline void set_type(const ::std::string& value);
  inline void set_type(const char* value);
  inline void set_type(const char* value, size_t size);
  inline ::std::string* mutable_type();
  inline ::std::string* release_type();
  inline void set_allocated_type(::std::string* type);

  // required int32 size = 4;
  inline bool has_size() const;
  inline void clear_size();
  static const int kSizeFieldNumber = 4;
  inline ::google::protobuf::int32 size() const;
  inline void set_size(::google::protobuf::int32 value);

  // required int32 compresssize = 5;
  inline bool has_compresssize() const;
  inline void clear_compresssize();
  static const int kCompresssizeFieldNumber = 5;
  inline ::google::protobuf::int32 compresssize() const;
  inline void set_compresssize(::google::protobuf::int32 value);

  // optional bool empty = 6;
  inline bool has_empty() const;
  inline void clear_empty();
  static const int kEmptyFieldNumber = 6;
  inline bool empty() const;
  inline void set_empty(bool value);

  // optional int32 time = 7;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 7;
  inline ::google::protobuf::int32 time() const;
  inline void set_time(::google::protobuf::int32 value);

  // optional int32 width = 8;
  inline bool has_width() const;
  inline void clear_width();
  static const int kWidthFieldNumber = 8;
  inline ::google::protobuf::int32 width() const;
  inline void set_width(::google::protobuf::int32 value);

  // optional int32 height = 9;
  inline bool has_height() const;
  inline void clear_height();
  static const int kHeightFieldNumber = 9;
  inline ::google::protobuf::int32 height() const;
  inline void set_height(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Resource)
 private:
  inline void set_has_key();
  inline void clear_has_key();
  inline void set_has_path();
  inline void clear_has_path();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_size();
  inline void clear_has_size();
  inline void set_has_compresssize();
  inline void clear_has_compresssize();
  inline void set_has_empty();
  inline void clear_has_empty();
  inline void set_has_time();
  inline void clear_has_time();
  inline void set_has_width();
  inline void clear_has_width();
  inline void set_has_height();
  inline void clear_has_height();

  ::std::string* key_;
  ::std::string* path_;
  ::std::string* type_;
  ::google::protobuf::int32 size_;
  ::google::protobuf::int32 compresssize_;
  bool empty_;
  ::google::protobuf::int32 time_;
  ::google::protobuf::int32 width_;
  ::google::protobuf::int32 height_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_ccgamec_5fconfig_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_ccgamec_5fconfig_2eproto();
  #endif
  friend void protobuf_AssignDesc_ccgamec_5fconfig_2eproto();
  friend void protobuf_ShutdownFile_ccgamec_5fconfig_2eproto();

  void InitAsDefaultInstance();
  static Resource* default_instance_;
};
// -------------------------------------------------------------------

class RPFile : public ::google::protobuf::MessageLite {
 public:
  RPFile();
  virtual ~RPFile();

  RPFile(const RPFile& from);

  inline RPFile& operator=(const RPFile& from) {
    CopyFrom(from);
    return *this;
  }

  static const RPFile& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const RPFile* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(RPFile* other);

  // implements Message ----------------------------------------------

  RPFile* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const RPFile& from);
  void MergeFrom(const RPFile& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // repeated .Resource resource = 2;
  inline int resource_size() const;
  inline void clear_resource();
  static const int kResourceFieldNumber = 2;
  inline const ::Resource& resource(int index) const;
  inline ::Resource* mutable_resource(int index);
  inline ::Resource* add_resource();
  inline const ::google::protobuf::RepeatedPtrField< ::Resource >&
      resource() const;
  inline ::google::protobuf::RepeatedPtrField< ::Resource >*
      mutable_resource();

  // required int32 length = 3;
  inline bool has_length() const;
  inline void clear_length();
  static const int kLengthFieldNumber = 3;
  inline ::google::protobuf::int32 length() const;
  inline void set_length(::google::protobuf::int32 value);

  // optional bool ispreload = 4;
  inline bool has_ispreload() const;
  inline void clear_ispreload();
  static const int kIspreloadFieldNumber = 4;
  inline bool ispreload() const;
  inline void set_ispreload(bool value);

  // @@protoc_insertion_point(class_scope:RPFile)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_length();
  inline void clear_has_length();
  inline void set_has_ispreload();
  inline void clear_has_ispreload();

  ::std::string* name_;
  ::google::protobuf::RepeatedPtrField< ::Resource > resource_;
  ::google::protobuf::int32 length_;
  bool ispreload_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_ccgamec_5fconfig_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_ccgamec_5fconfig_2eproto();
  #endif
  friend void protobuf_AssignDesc_ccgamec_5fconfig_2eproto();
  friend void protobuf_ShutdownFile_ccgamec_5fconfig_2eproto();

  void InitAsDefaultInstance();
  static RPFile* default_instance_;
};
// -------------------------------------------------------------------

class PDFile : public ::google::protobuf::MessageLite {
 public:
  PDFile();
  virtual ~PDFile();

  PDFile(const PDFile& from);

  inline PDFile& operator=(const PDFile& from) {
    CopyFrom(from);
    return *this;
  }

  static const PDFile& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const PDFile* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(PDFile* other);

  // implements Message ----------------------------------------------

  PDFile* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const PDFile& from);
  void MergeFrom(const PDFile& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string name = 1;
  inline int name_size() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name(int index) const;
  inline ::std::string* mutable_name(int index);
  inline void set_name(int index, const ::std::string& value);
  inline void set_name(int index, const char* value);
  inline void set_name(int index, const char* value, size_t size);
  inline ::std::string* add_name();
  inline void add_name(const ::std::string& value);
  inline void add_name(const char* value);
  inline void add_name(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& name() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_name();

  // @@protoc_insertion_point(class_scope:PDFile)
 private:

  ::google::protobuf::RepeatedPtrField< ::std::string> name_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_ccgamec_5fconfig_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_ccgamec_5fconfig_2eproto();
  #endif
  friend void protobuf_AssignDesc_ccgamec_5fconfig_2eproto();
  friend void protobuf_ShutdownFile_ccgamec_5fconfig_2eproto();

  void InitAsDefaultInstance();
  static PDFile* default_instance_;
};
// -------------------------------------------------------------------

class ToolConfig : public ::google::protobuf::MessageLite {
 public:
  ToolConfig();
  virtual ~ToolConfig();

  ToolConfig(const ToolConfig& from);

  inline ToolConfig& operator=(const ToolConfig& from) {
    CopyFrom(from);
    return *this;
  }

  static const ToolConfig& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const ToolConfig* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(ToolConfig* other);

  // implements Message ----------------------------------------------

  ToolConfig* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const ToolConfig& from);
  void MergeFrom(const ToolConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string name = 1;
  inline int name_size() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name(int index) const;
  inline ::std::string* mutable_name(int index);
  inline void set_name(int index, const ::std::string& value);
  inline void set_name(int index, const char* value);
  inline void set_name(int index, const char* value, size_t size);
  inline ::std::string* add_name();
  inline void add_name(const ::std::string& value);
  inline void add_name(const char* value);
  inline void add_name(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& name() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_name();

  // @@protoc_insertion_point(class_scope:ToolConfig)
 private:

  ::google::protobuf::RepeatedPtrField< ::std::string> name_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_ccgamec_5fconfig_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_ccgamec_5fconfig_2eproto();
  #endif
  friend void protobuf_AssignDesc_ccgamec_5fconfig_2eproto();
  friend void protobuf_ShutdownFile_ccgamec_5fconfig_2eproto();

  void InitAsDefaultInstance();
  static ToolConfig* default_instance_;
};
// -------------------------------------------------------------------

class ServerConfig : public ::google::protobuf::MessageLite {
 public:
  ServerConfig();
  virtual ~ServerConfig();

  ServerConfig(const ServerConfig& from);

  inline ServerConfig& operator=(const ServerConfig& from) {
    CopyFrom(from);
    return *this;
  }

  static const ServerConfig& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const ServerConfig* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(ServerConfig* other);

  // implements Message ----------------------------------------------

  ServerConfig* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const ServerConfig& from);
  void MergeFrom(const ServerConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string version = 1;
  inline bool has_version() const;
  inline void clear_version();
  static const int kVersionFieldNumber = 1;
  inline const ::std::string& version() const;
  inline void set_version(const ::std::string& value);
  inline void set_version(const char* value);
  inline void set_version(const char* value, size_t size);
  inline ::std::string* mutable_version();
  inline ::std::string* release_version();
  inline void set_allocated_version(::std::string* version);

  // required string packagename = 2;
  inline bool has_packagename() const;
  inline void clear_packagename();
  static const int kPackagenameFieldNumber = 2;
  inline const ::std::string& packagename() const;
  inline void set_packagename(const ::std::string& value);
  inline void set_packagename(const char* value);
  inline void set_packagename(const char* value, size_t size);
  inline ::std::string* mutable_packagename();
  inline ::std::string* release_packagename();
  inline void set_allocated_packagename(::std::string* packagename);

  // required string baseurl = 3;
  inline bool has_baseurl() const;
  inline void clear_baseurl();
  static const int kBaseurlFieldNumber = 3;
  inline const ::std::string& baseurl() const;
  inline void set_baseurl(const ::std::string& value);
  inline void set_baseurl(const char* value);
  inline void set_baseurl(const char* value, size_t size);
  inline ::std::string* mutable_baseurl();
  inline ::std::string* release_baseurl();
  inline void set_allocated_baseurl(::std::string* baseurl);

  // repeated .RPFile rpfile = 4;
  inline int rpfile_size() const;
  inline void clear_rpfile();
  static const int kRpfileFieldNumber = 4;
  inline const ::RPFile& rpfile(int index) const;
  inline ::RPFile* mutable_rpfile(int index);
  inline ::RPFile* add_rpfile();
  inline const ::google::protobuf::RepeatedPtrField< ::RPFile >&
      rpfile() const;
  inline ::google::protobuf::RepeatedPtrField< ::RPFile >*
      mutable_rpfile();

  // optional .PDFile pdfile = 5;
  inline bool has_pdfile() const;
  inline void clear_pdfile();
  static const int kPdfileFieldNumber = 5;
  inline const ::PDFile& pdfile() const;
  inline ::PDFile* mutable_pdfile();
  inline ::PDFile* release_pdfile();
  inline void set_allocated_pdfile(::PDFile* pdfile);

  // required int32 predownload = 6;
  inline bool has_predownload() const;
  inline void clear_predownload();
  static const int kPredownloadFieldNumber = 6;
  inline ::google::protobuf::int32 predownload() const;
  inline void set_predownload(::google::protobuf::int32 value);

  // optional .ToolConfig toolconfig = 7;
  inline bool has_toolconfig() const;
  inline void clear_toolconfig();
  static const int kToolconfigFieldNumber = 7;
  inline const ::ToolConfig& toolconfig() const;
  inline ::ToolConfig* mutable_toolconfig();
  inline ::ToolConfig* release_toolconfig();
  inline void set_allocated_toolconfig(::ToolConfig* toolconfig);

  // @@protoc_insertion_point(class_scope:ServerConfig)
 private:
  inline void set_has_version();
  inline void clear_has_version();
  inline void set_has_packagename();
  inline void clear_has_packagename();
  inline void set_has_baseurl();
  inline void clear_has_baseurl();
  inline void set_has_pdfile();
  inline void clear_has_pdfile();
  inline void set_has_predownload();
  inline void clear_has_predownload();
  inline void set_has_toolconfig();
  inline void clear_has_toolconfig();

  ::std::string* version_;
  ::std::string* packagename_;
  ::std::string* baseurl_;
  ::google::protobuf::RepeatedPtrField< ::RPFile > rpfile_;
  ::PDFile* pdfile_;
  ::ToolConfig* toolconfig_;
  ::google::protobuf::int32 predownload_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_ccgamec_5fconfig_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_ccgamec_5fconfig_2eproto();
  #endif
  friend void protobuf_AssignDesc_ccgamec_5fconfig_2eproto();
  friend void protobuf_ShutdownFile_ccgamec_5fconfig_2eproto();

  void InitAsDefaultInstance();
  static ServerConfig* default_instance_;
};
// ===================================================================


// ===================================================================

// Resource

// required string key = 1;
inline bool Resource::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Resource::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Resource::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Resource::clear_key() {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    key_->clear();
  }
  clear_has_key();
}
inline const ::std::string& Resource::key() const {
  return *key_;
}
inline void Resource::set_key(const ::std::string& value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(value);
}
inline void Resource::set_key(const char* value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(value);
}
inline void Resource::set_key(const char* value, size_t size) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Resource::mutable_key() {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  return key_;
}
inline ::std::string* Resource::release_key() {
  clear_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = key_;
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Resource::set_allocated_key(::std::string* key) {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    delete key_;
  }
  if (key) {
    set_has_key();
    key_ = key;
  } else {
    clear_has_key();
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string path = 2;
inline bool Resource::has_path() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Resource::set_has_path() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Resource::clear_has_path() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Resource::clear_path() {
  if (path_ != &::google::protobuf::internal::kEmptyString) {
    path_->clear();
  }
  clear_has_path();
}
inline const ::std::string& Resource::path() const {
  return *path_;
}
inline void Resource::set_path(const ::std::string& value) {
  set_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    path_ = new ::std::string;
  }
  path_->assign(value);
}
inline void Resource::set_path(const char* value) {
  set_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    path_ = new ::std::string;
  }
  path_->assign(value);
}
inline void Resource::set_path(const char* value, size_t size) {
  set_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    path_ = new ::std::string;
  }
  path_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Resource::mutable_path() {
  set_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    path_ = new ::std::string;
  }
  return path_;
}
inline ::std::string* Resource::release_path() {
  clear_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = path_;
    path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Resource::set_allocated_path(::std::string* path) {
  if (path_ != &::google::protobuf::internal::kEmptyString) {
    delete path_;
  }
  if (path) {
    set_has_path();
    path_ = path;
  } else {
    clear_has_path();
    path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string type = 3;
inline bool Resource::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Resource::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Resource::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Resource::clear_type() {
  if (type_ != &::google::protobuf::internal::kEmptyString) {
    type_->clear();
  }
  clear_has_type();
}
inline const ::std::string& Resource::type() const {
  return *type_;
}
inline void Resource::set_type(const ::std::string& value) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    type_ = new ::std::string;
  }
  type_->assign(value);
}
inline void Resource::set_type(const char* value) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    type_ = new ::std::string;
  }
  type_->assign(value);
}
inline void Resource::set_type(const char* value, size_t size) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    type_ = new ::std::string;
  }
  type_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Resource::mutable_type() {
  set_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    type_ = new ::std::string;
  }
  return type_;
}
inline ::std::string* Resource::release_type() {
  clear_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = type_;
    type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Resource::set_allocated_type(::std::string* type) {
  if (type_ != &::google::protobuf::internal::kEmptyString) {
    delete type_;
  }
  if (type) {
    set_has_type();
    type_ = type;
  } else {
    clear_has_type();
    type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 size = 4;
inline bool Resource::has_size() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Resource::set_has_size() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Resource::clear_has_size() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Resource::clear_size() {
  size_ = 0;
  clear_has_size();
}
inline ::google::protobuf::int32 Resource::size() const {
  return size_;
}
inline void Resource::set_size(::google::protobuf::int32 value) {
  set_has_size();
  size_ = value;
}

// required int32 compresssize = 5;
inline bool Resource::has_compresssize() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Resource::set_has_compresssize() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Resource::clear_has_compresssize() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Resource::clear_compresssize() {
  compresssize_ = 0;
  clear_has_compresssize();
}
inline ::google::protobuf::int32 Resource::compresssize() const {
  return compresssize_;
}
inline void Resource::set_compresssize(::google::protobuf::int32 value) {
  set_has_compresssize();
  compresssize_ = value;
}

// optional bool empty = 6;
inline bool Resource::has_empty() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Resource::set_has_empty() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Resource::clear_has_empty() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Resource::clear_empty() {
  empty_ = false;
  clear_has_empty();
}
inline bool Resource::empty() const {
  return empty_;
}
inline void Resource::set_empty(bool value) {
  set_has_empty();
  empty_ = value;
}

// optional int32 time = 7;
inline bool Resource::has_time() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Resource::set_has_time() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Resource::clear_has_time() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Resource::clear_time() {
  time_ = 0;
  clear_has_time();
}
inline ::google::protobuf::int32 Resource::time() const {
  return time_;
}
inline void Resource::set_time(::google::protobuf::int32 value) {
  set_has_time();
  time_ = value;
}

// optional int32 width = 8;
inline bool Resource::has_width() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Resource::set_has_width() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Resource::clear_has_width() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Resource::clear_width() {
  width_ = 0;
  clear_has_width();
}
inline ::google::protobuf::int32 Resource::width() const {
  return width_;
}
inline void Resource::set_width(::google::protobuf::int32 value) {
  set_has_width();
  width_ = value;
}

// optional int32 height = 9;
inline bool Resource::has_height() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Resource::set_has_height() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Resource::clear_has_height() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Resource::clear_height() {
  height_ = 0;
  clear_has_height();
}
inline ::google::protobuf::int32 Resource::height() const {
  return height_;
}
inline void Resource::set_height(::google::protobuf::int32 value) {
  set_has_height();
  height_ = value;
}

// -------------------------------------------------------------------

// RPFile

// required string name = 1;
inline bool RPFile::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RPFile::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RPFile::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RPFile::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& RPFile::name() const {
  return *name_;
}
inline void RPFile::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void RPFile::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void RPFile::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RPFile::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* RPFile::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void RPFile::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated .Resource resource = 2;
inline int RPFile::resource_size() const {
  return resource_.size();
}
inline void RPFile::clear_resource() {
  resource_.Clear();
}
inline const ::Resource& RPFile::resource(int index) const {
  return resource_.Get(index);
}
inline ::Resource* RPFile::mutable_resource(int index) {
  return resource_.Mutable(index);
}
inline ::Resource* RPFile::add_resource() {
  return resource_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Resource >&
RPFile::resource() const {
  return resource_;
}
inline ::google::protobuf::RepeatedPtrField< ::Resource >*
RPFile::mutable_resource() {
  return &resource_;
}

// required int32 length = 3;
inline bool RPFile::has_length() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RPFile::set_has_length() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RPFile::clear_has_length() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RPFile::clear_length() {
  length_ = 0;
  clear_has_length();
}
inline ::google::protobuf::int32 RPFile::length() const {
  return length_;
}
inline void RPFile::set_length(::google::protobuf::int32 value) {
  set_has_length();
  length_ = value;
}

// optional bool ispreload = 4;
inline bool RPFile::has_ispreload() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RPFile::set_has_ispreload() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RPFile::clear_has_ispreload() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RPFile::clear_ispreload() {
  ispreload_ = false;
  clear_has_ispreload();
}
inline bool RPFile::ispreload() const {
  return ispreload_;
}
inline void RPFile::set_ispreload(bool value) {
  set_has_ispreload();
  ispreload_ = value;
}

// -------------------------------------------------------------------

// PDFile

// repeated string name = 1;
inline int PDFile::name_size() const {
  return name_.size();
}
inline void PDFile::clear_name() {
  name_.Clear();
}
inline const ::std::string& PDFile::name(int index) const {
  return name_.Get(index);
}
inline ::std::string* PDFile::mutable_name(int index) {
  return name_.Mutable(index);
}
inline void PDFile::set_name(int index, const ::std::string& value) {
  name_.Mutable(index)->assign(value);
}
inline void PDFile::set_name(int index, const char* value) {
  name_.Mutable(index)->assign(value);
}
inline void PDFile::set_name(int index, const char* value, size_t size) {
  name_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PDFile::add_name() {
  return name_.Add();
}
inline void PDFile::add_name(const ::std::string& value) {
  name_.Add()->assign(value);
}
inline void PDFile::add_name(const char* value) {
  name_.Add()->assign(value);
}
inline void PDFile::add_name(const char* value, size_t size) {
  name_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
PDFile::name() const {
  return name_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
PDFile::mutable_name() {
  return &name_;
}

// -------------------------------------------------------------------

// ToolConfig

// repeated string name = 1;
inline int ToolConfig::name_size() const {
  return name_.size();
}
inline void ToolConfig::clear_name() {
  name_.Clear();
}
inline const ::std::string& ToolConfig::name(int index) const {
  return name_.Get(index);
}
inline ::std::string* ToolConfig::mutable_name(int index) {
  return name_.Mutable(index);
}
inline void ToolConfig::set_name(int index, const ::std::string& value) {
  name_.Mutable(index)->assign(value);
}
inline void ToolConfig::set_name(int index, const char* value) {
  name_.Mutable(index)->assign(value);
}
inline void ToolConfig::set_name(int index, const char* value, size_t size) {
  name_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ToolConfig::add_name() {
  return name_.Add();
}
inline void ToolConfig::add_name(const ::std::string& value) {
  name_.Add()->assign(value);
}
inline void ToolConfig::add_name(const char* value) {
  name_.Add()->assign(value);
}
inline void ToolConfig::add_name(const char* value, size_t size) {
  name_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ToolConfig::name() const {
  return name_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ToolConfig::mutable_name() {
  return &name_;
}

// -------------------------------------------------------------------

// ServerConfig

// required string version = 1;
inline bool ServerConfig::has_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ServerConfig::set_has_version() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ServerConfig::clear_has_version() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ServerConfig::clear_version() {
  if (version_ != &::google::protobuf::internal::kEmptyString) {
    version_->clear();
  }
  clear_has_version();
}
inline const ::std::string& ServerConfig::version() const {
  return *version_;
}
inline void ServerConfig::set_version(const ::std::string& value) {
  set_has_version();
  if (version_ == &::google::protobuf::internal::kEmptyString) {
    version_ = new ::std::string;
  }
  version_->assign(value);
}
inline void ServerConfig::set_version(const char* value) {
  set_has_version();
  if (version_ == &::google::protobuf::internal::kEmptyString) {
    version_ = new ::std::string;
  }
  version_->assign(value);
}
inline void ServerConfig::set_version(const char* value, size_t size) {
  set_has_version();
  if (version_ == &::google::protobuf::internal::kEmptyString) {
    version_ = new ::std::string;
  }
  version_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ServerConfig::mutable_version() {
  set_has_version();
  if (version_ == &::google::protobuf::internal::kEmptyString) {
    version_ = new ::std::string;
  }
  return version_;
}
inline ::std::string* ServerConfig::release_version() {
  clear_has_version();
  if (version_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = version_;
    version_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ServerConfig::set_allocated_version(::std::string* version) {
  if (version_ != &::google::protobuf::internal::kEmptyString) {
    delete version_;
  }
  if (version) {
    set_has_version();
    version_ = version;
  } else {
    clear_has_version();
    version_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string packagename = 2;
inline bool ServerConfig::has_packagename() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ServerConfig::set_has_packagename() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ServerConfig::clear_has_packagename() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ServerConfig::clear_packagename() {
  if (packagename_ != &::google::protobuf::internal::kEmptyString) {
    packagename_->clear();
  }
  clear_has_packagename();
}
inline const ::std::string& ServerConfig::packagename() const {
  return *packagename_;
}
inline void ServerConfig::set_packagename(const ::std::string& value) {
  set_has_packagename();
  if (packagename_ == &::google::protobuf::internal::kEmptyString) {
    packagename_ = new ::std::string;
  }
  packagename_->assign(value);
}
inline void ServerConfig::set_packagename(const char* value) {
  set_has_packagename();
  if (packagename_ == &::google::protobuf::internal::kEmptyString) {
    packagename_ = new ::std::string;
  }
  packagename_->assign(value);
}
inline void ServerConfig::set_packagename(const char* value, size_t size) {
  set_has_packagename();
  if (packagename_ == &::google::protobuf::internal::kEmptyString) {
    packagename_ = new ::std::string;
  }
  packagename_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ServerConfig::mutable_packagename() {
  set_has_packagename();
  if (packagename_ == &::google::protobuf::internal::kEmptyString) {
    packagename_ = new ::std::string;
  }
  return packagename_;
}
inline ::std::string* ServerConfig::release_packagename() {
  clear_has_packagename();
  if (packagename_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = packagename_;
    packagename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ServerConfig::set_allocated_packagename(::std::string* packagename) {
  if (packagename_ != &::google::protobuf::internal::kEmptyString) {
    delete packagename_;
  }
  if (packagename) {
    set_has_packagename();
    packagename_ = packagename;
  } else {
    clear_has_packagename();
    packagename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string baseurl = 3;
inline bool ServerConfig::has_baseurl() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ServerConfig::set_has_baseurl() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ServerConfig::clear_has_baseurl() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ServerConfig::clear_baseurl() {
  if (baseurl_ != &::google::protobuf::internal::kEmptyString) {
    baseurl_->clear();
  }
  clear_has_baseurl();
}
inline const ::std::string& ServerConfig::baseurl() const {
  return *baseurl_;
}
inline void ServerConfig::set_baseurl(const ::std::string& value) {
  set_has_baseurl();
  if (baseurl_ == &::google::protobuf::internal::kEmptyString) {
    baseurl_ = new ::std::string;
  }
  baseurl_->assign(value);
}
inline void ServerConfig::set_baseurl(const char* value) {
  set_has_baseurl();
  if (baseurl_ == &::google::protobuf::internal::kEmptyString) {
    baseurl_ = new ::std::string;
  }
  baseurl_->assign(value);
}
inline void ServerConfig::set_baseurl(const char* value, size_t size) {
  set_has_baseurl();
  if (baseurl_ == &::google::protobuf::internal::kEmptyString) {
    baseurl_ = new ::std::string;
  }
  baseurl_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ServerConfig::mutable_baseurl() {
  set_has_baseurl();
  if (baseurl_ == &::google::protobuf::internal::kEmptyString) {
    baseurl_ = new ::std::string;
  }
  return baseurl_;
}
inline ::std::string* ServerConfig::release_baseurl() {
  clear_has_baseurl();
  if (baseurl_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = baseurl_;
    baseurl_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ServerConfig::set_allocated_baseurl(::std::string* baseurl) {
  if (baseurl_ != &::google::protobuf::internal::kEmptyString) {
    delete baseurl_;
  }
  if (baseurl) {
    set_has_baseurl();
    baseurl_ = baseurl;
  } else {
    clear_has_baseurl();
    baseurl_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated .RPFile rpfile = 4;
inline int ServerConfig::rpfile_size() const {
  return rpfile_.size();
}
inline void ServerConfig::clear_rpfile() {
  rpfile_.Clear();
}
inline const ::RPFile& ServerConfig::rpfile(int index) const {
  return rpfile_.Get(index);
}
inline ::RPFile* ServerConfig::mutable_rpfile(int index) {
  return rpfile_.Mutable(index);
}
inline ::RPFile* ServerConfig::add_rpfile() {
  return rpfile_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::RPFile >&
ServerConfig::rpfile() const {
  return rpfile_;
}
inline ::google::protobuf::RepeatedPtrField< ::RPFile >*
ServerConfig::mutable_rpfile() {
  return &rpfile_;
}

// optional .PDFile pdfile = 5;
inline bool ServerConfig::has_pdfile() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ServerConfig::set_has_pdfile() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ServerConfig::clear_has_pdfile() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ServerConfig::clear_pdfile() {
  if (pdfile_ != NULL) pdfile_->::PDFile::Clear();
  clear_has_pdfile();
}
inline const ::PDFile& ServerConfig::pdfile() const {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return pdfile_ != NULL ? *pdfile_ : *default_instance().pdfile_;
#else
  return pdfile_ != NULL ? *pdfile_ : *default_instance_->pdfile_;
#endif
}
inline ::PDFile* ServerConfig::mutable_pdfile() {
  set_has_pdfile();
  if (pdfile_ == NULL) pdfile_ = new ::PDFile;
  return pdfile_;
}
inline ::PDFile* ServerConfig::release_pdfile() {
  clear_has_pdfile();
  ::PDFile* temp = pdfile_;
  pdfile_ = NULL;
  return temp;
}
inline void ServerConfig::set_allocated_pdfile(::PDFile* pdfile) {
  delete pdfile_;
  pdfile_ = pdfile;
  if (pdfile) {
    set_has_pdfile();
  } else {
    clear_has_pdfile();
  }
}

// required int32 predownload = 6;
inline bool ServerConfig::has_predownload() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ServerConfig::set_has_predownload() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ServerConfig::clear_has_predownload() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ServerConfig::clear_predownload() {
  predownload_ = 0;
  clear_has_predownload();
}
inline ::google::protobuf::int32 ServerConfig::predownload() const {
  return predownload_;
}
inline void ServerConfig::set_predownload(::google::protobuf::int32 value) {
  set_has_predownload();
  predownload_ = value;
}

// optional .ToolConfig toolconfig = 7;
inline bool ServerConfig::has_toolconfig() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ServerConfig::set_has_toolconfig() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ServerConfig::clear_has_toolconfig() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ServerConfig::clear_toolconfig() {
  if (toolconfig_ != NULL) toolconfig_->::ToolConfig::Clear();
  clear_has_toolconfig();
}
inline const ::ToolConfig& ServerConfig::toolconfig() const {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return toolconfig_ != NULL ? *toolconfig_ : *default_instance().toolconfig_;
#else
  return toolconfig_ != NULL ? *toolconfig_ : *default_instance_->toolconfig_;
#endif
}
inline ::ToolConfig* ServerConfig::mutable_toolconfig() {
  set_has_toolconfig();
  if (toolconfig_ == NULL) toolconfig_ = new ::ToolConfig;
  return toolconfig_;
}
inline ::ToolConfig* ServerConfig::release_toolconfig() {
  clear_has_toolconfig();
  ::ToolConfig* temp = toolconfig_;
  toolconfig_ = NULL;
  return temp;
}
inline void ServerConfig::set_allocated_toolconfig(::ToolConfig* toolconfig) {
  delete toolconfig_;
  toolconfig_ = toolconfig;
  if (toolconfig) {
    set_has_toolconfig();
  } else {
    clear_has_toolconfig();
  }
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_ccgamec_5fconfig_2eproto__INCLUDED
