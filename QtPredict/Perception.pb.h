// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Perception.proto

#ifndef PROTOBUF_Perception_2eproto__INCLUDED
#define PROTOBUF_Perception_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_Perception_2eproto();
void protobuf_AssignDesc_Perception_2eproto();
void protobuf_ShutdownFile_Perception_2eproto();

class SuccInfo;
class Node;
class Perception;

// ===================================================================

class SuccInfo : public ::google::protobuf::MessageLite {
 public:
  SuccInfo();
  virtual ~SuccInfo();

  SuccInfo(const SuccInfo& from);

  inline SuccInfo& operator=(const SuccInfo& from) {
    CopyFrom(from);
    return *this;
  }

  static const SuccInfo& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const SuccInfo* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(SuccInfo* other);

  // implements Message ----------------------------------------------

  SuccInfo* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const SuccInfo& from);
  void MergeFrom(const SuccInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // required float cp = 2;
  inline bool has_cp() const;
  inline void clear_cp();
  static const int kCpFieldNumber = 2;
  inline float cp() const;
  inline void set_cp(float value);

  // optional bool isNext = 3;
  inline bool has_isnext() const;
  inline void clear_isnext();
  static const int kIsNextFieldNumber = 3;
  inline bool isnext() const;
  inline void set_isnext(bool value);

  // @@protoc_insertion_point(class_scope:SuccInfo)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_cp();
  inline void clear_has_cp();
  inline void set_has_isnext();
  inline void clear_has_isnext();

  ::google::protobuf::int32 id_;
  float cp_;
  bool isnext_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_Perception_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_Perception_2eproto();
  #endif
  friend void protobuf_AssignDesc_Perception_2eproto();
  friend void protobuf_ShutdownFile_Perception_2eproto();

  void InitAsDefaultInstance();
  static SuccInfo* default_instance_;
};
// -------------------------------------------------------------------

class Node : public ::google::protobuf::MessageLite {
 public:
  Node();
  virtual ~Node();

  Node(const Node& from);

  inline Node& operator=(const Node& from) {
    CopyFrom(from);
    return *this;
  }

  static const Node& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const Node* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(Node* other);

  // implements Message ----------------------------------------------

  Node* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const Node& from);
  void MergeFrom(const Node& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // required uint64 uniqKey = 2;
  inline bool has_uniqkey() const;
  inline void clear_uniqkey();
  static const int kUniqKeyFieldNumber = 2;
  inline ::google::protobuf::uint64 uniqkey() const;
  inline void set_uniqkey(::google::protobuf::uint64 value);

  // repeated uint64 keys = 3;
  inline int keys_size() const;
  inline void clear_keys();
  static const int kKeysFieldNumber = 3;
  inline ::google::protobuf::uint64 keys(int index) const;
  inline void set_keys(int index, ::google::protobuf::uint64 value);
  inline void add_keys(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      keys() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_keys();

  // repeated .SuccInfo succinfo = 4;
  inline int succinfo_size() const;
  inline void clear_succinfo();
  static const int kSuccinfoFieldNumber = 4;
  inline const ::SuccInfo& succinfo(int index) const;
  inline ::SuccInfo* mutable_succinfo(int index);
  inline ::SuccInfo* add_succinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::SuccInfo >&
      succinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::SuccInfo >*
      mutable_succinfo();

  // @@protoc_insertion_point(class_scope:Node)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_uniqkey();
  inline void clear_has_uniqkey();

  ::google::protobuf::uint64 uniqkey_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > keys_;
  ::google::protobuf::RepeatedPtrField< ::SuccInfo > succinfo_;
  ::google::protobuf::int32 id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_Perception_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_Perception_2eproto();
  #endif
  friend void protobuf_AssignDesc_Perception_2eproto();
  friend void protobuf_ShutdownFile_Perception_2eproto();

  void InitAsDefaultInstance();
  static Node* default_instance_;
};
// -------------------------------------------------------------------

class Perception : public ::google::protobuf::MessageLite {
 public:
  Perception();
  virtual ~Perception();

  Perception(const Perception& from);

  inline Perception& operator=(const Perception& from) {
    CopyFrom(from);
    return *this;
  }

  static const Perception& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const Perception* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(Perception* other);

  // implements Message ----------------------------------------------

  Perception* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const Perception& from);
  void MergeFrom(const Perception& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 nodeNum = 1;
  inline bool has_nodenum() const;
  inline void clear_nodenum();
  static const int kNodeNumFieldNumber = 1;
  inline ::google::protobuf::int32 nodenum() const;
  inline void set_nodenum(::google::protobuf::int32 value);

  // repeated .Node nodes = 2;
  inline int nodes_size() const;
  inline void clear_nodes();
  static const int kNodesFieldNumber = 2;
  inline const ::Node& nodes(int index) const;
  inline ::Node* mutable_nodes(int index);
  inline ::Node* add_nodes();
  inline const ::google::protobuf::RepeatedPtrField< ::Node >&
      nodes() const;
  inline ::google::protobuf::RepeatedPtrField< ::Node >*
      mutable_nodes();

  // @@protoc_insertion_point(class_scope:Perception)
 private:
  inline void set_has_nodenum();
  inline void clear_has_nodenum();

  ::google::protobuf::RepeatedPtrField< ::Node > nodes_;
  ::google::protobuf::int32 nodenum_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_Perception_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_Perception_2eproto();
  #endif
  friend void protobuf_AssignDesc_Perception_2eproto();
  friend void protobuf_ShutdownFile_Perception_2eproto();

  void InitAsDefaultInstance();
  static Perception* default_instance_;
};
// ===================================================================


// ===================================================================

// SuccInfo

// required int32 id = 1;
inline bool SuccInfo::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SuccInfo::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SuccInfo::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SuccInfo::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 SuccInfo::id() const {
  return id_;
}
inline void SuccInfo::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// required float cp = 2;
inline bool SuccInfo::has_cp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SuccInfo::set_has_cp() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SuccInfo::clear_has_cp() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SuccInfo::clear_cp() {
  cp_ = 0;
  clear_has_cp();
}
inline float SuccInfo::cp() const {
  return cp_;
}
inline void SuccInfo::set_cp(float value) {
  set_has_cp();
  cp_ = value;
}

// optional bool isNext = 3;
inline bool SuccInfo::has_isnext() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SuccInfo::set_has_isnext() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SuccInfo::clear_has_isnext() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SuccInfo::clear_isnext() {
  isnext_ = false;
  clear_has_isnext();
}
inline bool SuccInfo::isnext() const {
  return isnext_;
}
inline void SuccInfo::set_isnext(bool value) {
  set_has_isnext();
  isnext_ = value;
}

// -------------------------------------------------------------------

// Node

// required int32 id = 1;
inline bool Node::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Node::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Node::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Node::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 Node::id() const {
  return id_;
}
inline void Node::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// required uint64 uniqKey = 2;
inline bool Node::has_uniqkey() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Node::set_has_uniqkey() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Node::clear_has_uniqkey() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Node::clear_uniqkey() {
  uniqkey_ = GOOGLE_ULONGLONG(0);
  clear_has_uniqkey();
}
inline ::google::protobuf::uint64 Node::uniqkey() const {
  return uniqkey_;
}
inline void Node::set_uniqkey(::google::protobuf::uint64 value) {
  set_has_uniqkey();
  uniqkey_ = value;
}

// repeated uint64 keys = 3;
inline int Node::keys_size() const {
  return keys_.size();
}
inline void Node::clear_keys() {
  keys_.Clear();
}
inline ::google::protobuf::uint64 Node::keys(int index) const {
  return keys_.Get(index);
}
inline void Node::set_keys(int index, ::google::protobuf::uint64 value) {
  keys_.Set(index, value);
}
inline void Node::add_keys(::google::protobuf::uint64 value) {
  keys_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
Node::keys() const {
  return keys_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
Node::mutable_keys() {
  return &keys_;
}

// repeated .SuccInfo succinfo = 4;
inline int Node::succinfo_size() const {
  return succinfo_.size();
}
inline void Node::clear_succinfo() {
  succinfo_.Clear();
}
inline const ::SuccInfo& Node::succinfo(int index) const {
  return succinfo_.Get(index);
}
inline ::SuccInfo* Node::mutable_succinfo(int index) {
  return succinfo_.Mutable(index);
}
inline ::SuccInfo* Node::add_succinfo() {
  return succinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SuccInfo >&
Node::succinfo() const {
  return succinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::SuccInfo >*
Node::mutable_succinfo() {
  return &succinfo_;
}

// -------------------------------------------------------------------

// Perception

// required int32 nodeNum = 1;
inline bool Perception::has_nodenum() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Perception::set_has_nodenum() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Perception::clear_has_nodenum() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Perception::clear_nodenum() {
  nodenum_ = 0;
  clear_has_nodenum();
}
inline ::google::protobuf::int32 Perception::nodenum() const {
  return nodenum_;
}
inline void Perception::set_nodenum(::google::protobuf::int32 value) {
  set_has_nodenum();
  nodenum_ = value;
}

// repeated .Node nodes = 2;
inline int Perception::nodes_size() const {
  return nodes_.size();
}
inline void Perception::clear_nodes() {
  nodes_.Clear();
}
inline const ::Node& Perception::nodes(int index) const {
  return nodes_.Get(index);
}
inline ::Node* Perception::mutable_nodes(int index) {
  return nodes_.Mutable(index);
}
inline ::Node* Perception::add_nodes() {
  return nodes_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Node >&
Perception::nodes() const {
  return nodes_;
}
inline ::google::protobuf::RepeatedPtrField< ::Node >*
Perception::mutable_nodes() {
  return &nodes_;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Perception_2eproto__INCLUDED
