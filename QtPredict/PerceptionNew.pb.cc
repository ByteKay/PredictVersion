// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: PerceptionNew.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "PerceptionNew.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

void protobuf_ShutdownFile_PerceptionNew_2eproto() {
  delete SuccInfoNew::default_instance_;
  delete NodeNew::default_instance_;
  delete PerceptionNew::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_PerceptionNew_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_PerceptionNew_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  SuccInfoNew::default_instance_ = new SuccInfoNew();
  NodeNew::default_instance_ = new NodeNew();
  PerceptionNew::default_instance_ = new PerceptionNew();
  SuccInfoNew::default_instance_->InitAsDefaultInstance();
  NodeNew::default_instance_->InitAsDefaultInstance();
  PerceptionNew::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_PerceptionNew_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_PerceptionNew_2eproto_once_);
void protobuf_AddDesc_PerceptionNew_2eproto() {
  ::google::protobuf::::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_PerceptionNew_2eproto_once_,
                 &protobuf_AddDesc_PerceptionNew_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_PerceptionNew_2eproto {
  StaticDescriptorInitializer_PerceptionNew_2eproto() {
    protobuf_AddDesc_PerceptionNew_2eproto();
  }
} static_descriptor_initializer_PerceptionNew_2eproto_;
#endif

// ===================================================================

#ifndef _MSC_VER
const int SuccInfoNew::kIdFieldNumber;
const int SuccInfoNew::kCpFieldNumber;
const int SuccInfoNew::kIsNextFieldNumber;
#endif  // !_MSC_VER

SuccInfoNew::SuccInfoNew()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void SuccInfoNew::InitAsDefaultInstance() {
}

SuccInfoNew::SuccInfoNew(const SuccInfoNew& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void SuccInfoNew::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  cp_ = 0;
  isnext_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SuccInfoNew::~SuccInfoNew() {
  SharedDtor();
}

void SuccInfoNew::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void SuccInfoNew::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SuccInfoNew& SuccInfoNew::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_PerceptionNew_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_PerceptionNew_2eproto();
#endif
  return *default_instance_;
}

SuccInfoNew* SuccInfoNew::default_instance_ = NULL;

SuccInfoNew* SuccInfoNew::New() const {
  return new SuccInfoNew;
}

void SuccInfoNew::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    cp_ = 0;
    isnext_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool SuccInfoNew::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_cp;
        break;
      }

      // required float cp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_cp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &cp_)));
          set_has_cp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_isNext;
        break;
      }

      // optional bool isNext = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isNext:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isnext_)));
          set_has_isnext();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SuccInfoNew::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required float cp = 2;
  if (has_cp()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->cp(), output);
  }

  // optional bool isNext = 3;
  if (has_isnext()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->isnext(), output);
  }

}

int SuccInfoNew::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // required float cp = 2;
    if (has_cp()) {
      total_size += 1 + 4;
    }

    // optional bool isNext = 3;
    if (has_isnext()) {
      total_size += 1 + 1;
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SuccInfoNew::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SuccInfoNew*>(&from));
}

void SuccInfoNew::MergeFrom(const SuccInfoNew& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_cp()) {
      set_cp(from.cp());
    }
    if (from.has_isnext()) {
      set_isnext(from.isnext());
    }
  }
}

void SuccInfoNew::CopyFrom(const SuccInfoNew& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SuccInfoNew::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void SuccInfoNew::Swap(SuccInfoNew* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(cp_, other->cp_);
    std::swap(isnext_, other->isnext_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string SuccInfoNew::GetTypeName() const {
  return "SuccInfoNew";
}


// ===================================================================

#ifndef _MSC_VER
const int NodeNew::kIdFieldNumber;
const int NodeNew::kUniqKeyFieldNumber;
const int NodeNew::kKeysFieldNumber;
const int NodeNew::kSuccinfoFieldNumber;
#endif  // !_MSC_VER

NodeNew::NodeNew()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void NodeNew::InitAsDefaultInstance() {
}

NodeNew::NodeNew(const NodeNew& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void NodeNew::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  uniqkey_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NodeNew::~NodeNew() {
  SharedDtor();
}

void NodeNew::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void NodeNew::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const NodeNew& NodeNew::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_PerceptionNew_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_PerceptionNew_2eproto();
#endif
  return *default_instance_;
}

NodeNew* NodeNew::default_instance_ = NULL;

NodeNew* NodeNew::New() const {
  return new NodeNew;
}

void NodeNew::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    uniqkey_ = GOOGLE_ULONGLONG(0);
  }
  keys_.Clear();
  succinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool NodeNew::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_uniqKey;
        break;
      }

      // required uint64 uniqKey = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uniqKey:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uniqkey_)));
          set_has_uniqkey();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_keys;
        break;
      }

      // repeated string keys = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_keys:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_keys()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_keys;
        if (input->ExpectTag(34)) goto parse_succinfo;
        break;
      }

      // repeated .SuccInfoNew succinfo = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_succinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_succinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_succinfo;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NodeNew::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required uint64 uniqKey = 2;
  if (has_uniqkey()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->uniqkey(), output);
  }

  // repeated string keys = 3;
  for (int i = 0; i < this->keys_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->keys(i), output);
  }

  // repeated .SuccInfoNew succinfo = 4;
  for (int i = 0; i < this->succinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->succinfo(i), output);
  }

}

int NodeNew::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // required uint64 uniqKey = 2;
    if (has_uniqkey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uniqkey());
    }

  }
  // repeated string keys = 3;
  total_size += 1 * this->keys_size();
  for (int i = 0; i < this->keys_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->keys(i));
  }

  // repeated .SuccInfoNew succinfo = 4;
  total_size += 1 * this->succinfo_size();
  for (int i = 0; i < this->succinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->succinfo(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NodeNew::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const NodeNew*>(&from));
}

void NodeNew::MergeFrom(const NodeNew& from) {
  GOOGLE_CHECK_NE(&from, this);
  keys_.MergeFrom(from.keys_);
  succinfo_.MergeFrom(from.succinfo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_uniqkey()) {
      set_uniqkey(from.uniqkey());
    }
  }
}

void NodeNew::CopyFrom(const NodeNew& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NodeNew::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  for (int i = 0; i < succinfo_size(); i++) {
    if (!this->succinfo(i).IsInitialized()) return false;
  }
  return true;
}

void NodeNew::Swap(NodeNew* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(uniqkey_, other->uniqkey_);
    keys_.Swap(&other->keys_);
    succinfo_.Swap(&other->succinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string NodeNew::GetTypeName() const {
  return "NodeNew";
}


// ===================================================================

#ifndef _MSC_VER
const int PerceptionNew::kNodeNumFieldNumber;
const int PerceptionNew::kNodesFieldNumber;
#endif  // !_MSC_VER

PerceptionNew::PerceptionNew()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void PerceptionNew::InitAsDefaultInstance() {
}

PerceptionNew::PerceptionNew(const PerceptionNew& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void PerceptionNew::SharedCtor() {
  _cached_size_ = 0;
  nodenum_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PerceptionNew::~PerceptionNew() {
  SharedDtor();
}

void PerceptionNew::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void PerceptionNew::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PerceptionNew& PerceptionNew::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_PerceptionNew_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_PerceptionNew_2eproto();
#endif
  return *default_instance_;
}

PerceptionNew* PerceptionNew::default_instance_ = NULL;

PerceptionNew* PerceptionNew::New() const {
  return new PerceptionNew;
}

void PerceptionNew::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    nodenum_ = 0;
  }
  nodes_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool PerceptionNew::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 nodeNum = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nodenum_)));
          set_has_nodenum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_nodes;
        break;
      }

      // repeated .NodeNew nodes = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_nodes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_nodes()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_nodes;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PerceptionNew::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 nodeNum = 1;
  if (has_nodenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->nodenum(), output);
  }

  // repeated .NodeNew nodes = 2;
  for (int i = 0; i < this->nodes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->nodes(i), output);
  }

}

int PerceptionNew::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 nodeNum = 1;
    if (has_nodenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nodenum());
    }

  }
  // repeated .NodeNew nodes = 2;
  total_size += 1 * this->nodes_size();
  for (int i = 0; i < this->nodes_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->nodes(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PerceptionNew::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PerceptionNew*>(&from));
}

void PerceptionNew::MergeFrom(const PerceptionNew& from) {
  GOOGLE_CHECK_NE(&from, this);
  nodes_.MergeFrom(from.nodes_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_nodenum()) {
      set_nodenum(from.nodenum());
    }
  }
}

void PerceptionNew::CopyFrom(const PerceptionNew& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PerceptionNew::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < nodes_size(); i++) {
    if (!this->nodes(i).IsInitialized()) return false;
  }
  return true;
}

void PerceptionNew::Swap(PerceptionNew* other) {
  if (other != this) {
    std::swap(nodenum_, other->nodenum_);
    nodes_.Swap(&other->nodes_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string PerceptionNew::GetTypeName() const {
  return "PerceptionNew";
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
