// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ccgamec_config.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ccgamec_config.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

void protobuf_ShutdownFile_ccgamec_5fconfig_2eproto() {
  delete Resource::default_instance_;
  delete RPFile::default_instance_;
  delete PDFile::default_instance_;
  delete ToolConfig::default_instance_;
  delete ServerConfig::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_ccgamec_5fconfig_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_ccgamec_5fconfig_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  Resource::default_instance_ = new Resource();
  RPFile::default_instance_ = new RPFile();
  PDFile::default_instance_ = new PDFile();
  ToolConfig::default_instance_ = new ToolConfig();
  ServerConfig::default_instance_ = new ServerConfig();
  Resource::default_instance_->InitAsDefaultInstance();
  RPFile::default_instance_->InitAsDefaultInstance();
  PDFile::default_instance_->InitAsDefaultInstance();
  ToolConfig::default_instance_->InitAsDefaultInstance();
  ServerConfig::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ccgamec_5fconfig_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_ccgamec_5fconfig_2eproto_once_);
void protobuf_AddDesc_ccgamec_5fconfig_2eproto() {
  ::google::protobuf::::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_ccgamec_5fconfig_2eproto_once_,
                 &protobuf_AddDesc_ccgamec_5fconfig_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ccgamec_5fconfig_2eproto {
  StaticDescriptorInitializer_ccgamec_5fconfig_2eproto() {
    protobuf_AddDesc_ccgamec_5fconfig_2eproto();
  }
} static_descriptor_initializer_ccgamec_5fconfig_2eproto_;
#endif

// ===================================================================

#ifndef _MSC_VER
const int Resource::kKeyFieldNumber;
const int Resource::kPathFieldNumber;
const int Resource::kTypeFieldNumber;
const int Resource::kSizeFieldNumber;
const int Resource::kCompresssizeFieldNumber;
const int Resource::kEmptyFieldNumber;
const int Resource::kTimeFieldNumber;
const int Resource::kWidthFieldNumber;
const int Resource::kHeightFieldNumber;
#endif  // !_MSC_VER

Resource::Resource()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void Resource::InitAsDefaultInstance() {
}

Resource::Resource(const Resource& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void Resource::SharedCtor() {
  _cached_size_ = 0;
  key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  size_ = 0;
  compresssize_ = 0;
  empty_ = false;
  time_ = 0;
  width_ = 0;
  height_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Resource::~Resource() {
  SharedDtor();
}

void Resource::SharedDtor() {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    delete key_;
  }
  if (path_ != &::google::protobuf::internal::kEmptyString) {
    delete path_;
  }
  if (type_ != &::google::protobuf::internal::kEmptyString) {
    delete type_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void Resource::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Resource& Resource::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ccgamec_5fconfig_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ccgamec_5fconfig_2eproto();
#endif
  return *default_instance_;
}

Resource* Resource::default_instance_ = NULL;

Resource* Resource::New() const {
  return new Resource;
}

void Resource::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_key()) {
      if (key_ != &::google::protobuf::internal::kEmptyString) {
        key_->clear();
      }
    }
    if (has_path()) {
      if (path_ != &::google::protobuf::internal::kEmptyString) {
        path_->clear();
      }
    }
    if (has_type()) {
      if (type_ != &::google::protobuf::internal::kEmptyString) {
        type_->clear();
      }
    }
    size_ = 0;
    compresssize_ = 0;
    empty_ = false;
    time_ = 0;
    width_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    height_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool Resource::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string key = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_path;
        break;
      }

      // required string path = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_type;
        break;
      }

      // optional string type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_size;
        break;
      }

      // required int32 size = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &size_)));
          set_has_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_compresssize;
        break;
      }

      // required int32 compresssize = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_compresssize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &compresssize_)));
          set_has_compresssize();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_empty;
        break;
      }

      // optional bool empty = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_empty:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &empty_)));
          set_has_empty();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_time;
        break;
      }

      // optional int32 time = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_width;
        break;
      }

      // optional int32 width = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_width:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &width_)));
          set_has_width();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_height;
        break;
      }

      // optional int32 height = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &height_)));
          set_has_height();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Resource::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->key(), output);
  }

  // required string path = 2;
  if (has_path()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->path(), output);
  }

  // optional string type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->type(), output);
  }

  // required int32 size = 4;
  if (has_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->size(), output);
  }

  // required int32 compresssize = 5;
  if (has_compresssize()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->compresssize(), output);
  }

  // optional bool empty = 6;
  if (has_empty()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->empty(), output);
  }

  // optional int32 time = 7;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->time(), output);
  }

  // optional int32 width = 8;
  if (has_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->width(), output);
  }

  // optional int32 height = 9;
  if (has_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->height(), output);
  }

}

int Resource::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->key());
    }

    // required string path = 2;
    if (has_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->path());
    }

    // optional string type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->type());
    }

    // required int32 size = 4;
    if (has_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->size());
    }

    // required int32 compresssize = 5;
    if (has_compresssize()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->compresssize());
    }

    // optional bool empty = 6;
    if (has_empty()) {
      total_size += 1 + 1;
    }

    // optional int32 time = 7;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->time());
    }

    // optional int32 width = 8;
    if (has_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->width());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 height = 9;
    if (has_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->height());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Resource::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Resource*>(&from));
}

void Resource::MergeFrom(const Resource& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_path()) {
      set_path(from.path());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_size()) {
      set_size(from.size());
    }
    if (from.has_compresssize()) {
      set_compresssize(from.compresssize());
    }
    if (from.has_empty()) {
      set_empty(from.empty());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_width()) {
      set_width(from.width());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_height()) {
      set_height(from.height());
    }
  }
}

void Resource::CopyFrom(const Resource& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Resource::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001b) != 0x0000001b) return false;

  return true;
}

void Resource::Swap(Resource* other) {
  if (other != this) {
    std::swap(key_, other->key_);
    std::swap(path_, other->path_);
    std::swap(type_, other->type_);
    std::swap(size_, other->size_);
    std::swap(compresssize_, other->compresssize_);
    std::swap(empty_, other->empty_);
    std::swap(time_, other->time_);
    std::swap(width_, other->width_);
    std::swap(height_, other->height_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string Resource::GetTypeName() const {
  return "Resource";
}


// ===================================================================

#ifndef _MSC_VER
const int RPFile::kNameFieldNumber;
const int RPFile::kResourceFieldNumber;
const int RPFile::kLengthFieldNumber;
const int RPFile::kIspreloadFieldNumber;
#endif  // !_MSC_VER

RPFile::RPFile()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void RPFile::InitAsDefaultInstance() {
}

RPFile::RPFile(const RPFile& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void RPFile::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  length_ = 0;
  ispreload_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RPFile::~RPFile() {
  SharedDtor();
}

void RPFile::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void RPFile::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RPFile& RPFile::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ccgamec_5fconfig_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ccgamec_5fconfig_2eproto();
#endif
  return *default_instance_;
}

RPFile* RPFile::default_instance_ = NULL;

RPFile* RPFile::New() const {
  return new RPFile;
}

void RPFile::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    length_ = 0;
    ispreload_ = false;
  }
  resource_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool RPFile::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_resource;
        break;
      }

      // repeated .Resource resource = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_resource:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_resource()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_resource;
        if (input->ExpectTag(24)) goto parse_length;
        break;
      }

      // required int32 length = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_length:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &length_)));
          set_has_length();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_ispreload;
        break;
      }

      // optional bool ispreload = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ispreload:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ispreload_)));
          set_has_ispreload();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RPFile::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // repeated .Resource resource = 2;
  for (int i = 0; i < this->resource_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->resource(i), output);
  }

  // required int32 length = 3;
  if (has_length()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->length(), output);
  }

  // optional bool ispreload = 4;
  if (has_ispreload()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->ispreload(), output);
  }

}

int RPFile::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required int32 length = 3;
    if (has_length()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->length());
    }

    // optional bool ispreload = 4;
    if (has_ispreload()) {
      total_size += 1 + 1;
    }

  }
  // repeated .Resource resource = 2;
  total_size += 1 * this->resource_size();
  for (int i = 0; i < this->resource_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->resource(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RPFile::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RPFile*>(&from));
}

void RPFile::MergeFrom(const RPFile& from) {
  GOOGLE_CHECK_NE(&from, this);
  resource_.MergeFrom(from.resource_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_length()) {
      set_length(from.length());
    }
    if (from.has_ispreload()) {
      set_ispreload(from.ispreload());
    }
  }
}

void RPFile::CopyFrom(const RPFile& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RPFile::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000005) != 0x00000005) return false;

  for (int i = 0; i < resource_size(); i++) {
    if (!this->resource(i).IsInitialized()) return false;
  }
  return true;
}

void RPFile::Swap(RPFile* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    resource_.Swap(&other->resource_);
    std::swap(length_, other->length_);
    std::swap(ispreload_, other->ispreload_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string RPFile::GetTypeName() const {
  return "RPFile";
}


// ===================================================================

#ifndef _MSC_VER
const int PDFile::kNameFieldNumber;
#endif  // !_MSC_VER

PDFile::PDFile()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void PDFile::InitAsDefaultInstance() {
}

PDFile::PDFile(const PDFile& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void PDFile::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PDFile::~PDFile() {
  SharedDtor();
}

void PDFile::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void PDFile::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PDFile& PDFile::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ccgamec_5fconfig_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ccgamec_5fconfig_2eproto();
#endif
  return *default_instance_;
}

PDFile* PDFile::default_instance_ = NULL;

PDFile* PDFile::New() const {
  return new PDFile;
}

void PDFile::Clear() {
  name_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool PDFile::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_name;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PDFile::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated string name = 1;
  for (int i = 0; i < this->name_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(i), output);
  }

}

int PDFile::ByteSize() const {
  int total_size = 0;

  // repeated string name = 1;
  total_size += 1 * this->name_size();
  for (int i = 0; i < this->name_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->name(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PDFile::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PDFile*>(&from));
}

void PDFile::MergeFrom(const PDFile& from) {
  GOOGLE_CHECK_NE(&from, this);
  name_.MergeFrom(from.name_);
}

void PDFile::CopyFrom(const PDFile& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PDFile::IsInitialized() const {

  return true;
}

void PDFile::Swap(PDFile* other) {
  if (other != this) {
    name_.Swap(&other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string PDFile::GetTypeName() const {
  return "PDFile";
}


// ===================================================================

#ifndef _MSC_VER
const int ToolConfig::kNameFieldNumber;
#endif  // !_MSC_VER

ToolConfig::ToolConfig()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void ToolConfig::InitAsDefaultInstance() {
}

ToolConfig::ToolConfig(const ToolConfig& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void ToolConfig::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ToolConfig::~ToolConfig() {
  SharedDtor();
}

void ToolConfig::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void ToolConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ToolConfig& ToolConfig::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ccgamec_5fconfig_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ccgamec_5fconfig_2eproto();
#endif
  return *default_instance_;
}

ToolConfig* ToolConfig::default_instance_ = NULL;

ToolConfig* ToolConfig::New() const {
  return new ToolConfig;
}

void ToolConfig::Clear() {
  name_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool ToolConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_name;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ToolConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated string name = 1;
  for (int i = 0; i < this->name_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(i), output);
  }

}

int ToolConfig::ByteSize() const {
  int total_size = 0;

  // repeated string name = 1;
  total_size += 1 * this->name_size();
  for (int i = 0; i < this->name_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->name(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ToolConfig::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ToolConfig*>(&from));
}

void ToolConfig::MergeFrom(const ToolConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  name_.MergeFrom(from.name_);
}

void ToolConfig::CopyFrom(const ToolConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ToolConfig::IsInitialized() const {

  return true;
}

void ToolConfig::Swap(ToolConfig* other) {
  if (other != this) {
    name_.Swap(&other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ToolConfig::GetTypeName() const {
  return "ToolConfig";
}


// ===================================================================

#ifndef _MSC_VER
const int ServerConfig::kVersionFieldNumber;
const int ServerConfig::kPackagenameFieldNumber;
const int ServerConfig::kBaseurlFieldNumber;
const int ServerConfig::kRpfileFieldNumber;
const int ServerConfig::kPdfileFieldNumber;
const int ServerConfig::kPredownloadFieldNumber;
const int ServerConfig::kToolconfigFieldNumber;
#endif  // !_MSC_VER

ServerConfig::ServerConfig()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void ServerConfig::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  pdfile_ = const_cast< ::PDFile*>(
      ::PDFile::internal_default_instance());
#else
  pdfile_ = const_cast< ::PDFile*>(&::PDFile::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  toolconfig_ = const_cast< ::ToolConfig*>(
      ::ToolConfig::internal_default_instance());
#else
  toolconfig_ = const_cast< ::ToolConfig*>(&::ToolConfig::default_instance());
#endif
}

ServerConfig::ServerConfig(const ServerConfig& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void ServerConfig::SharedCtor() {
  _cached_size_ = 0;
  version_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  packagename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  baseurl_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  pdfile_ = NULL;
  predownload_ = 0;
  toolconfig_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ServerConfig::~ServerConfig() {
  SharedDtor();
}

void ServerConfig::SharedDtor() {
  if (version_ != &::google::protobuf::internal::kEmptyString) {
    delete version_;
  }
  if (packagename_ != &::google::protobuf::internal::kEmptyString) {
    delete packagename_;
  }
  if (baseurl_ != &::google::protobuf::internal::kEmptyString) {
    delete baseurl_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete pdfile_;
    delete toolconfig_;
  }
}

void ServerConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ServerConfig& ServerConfig::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ccgamec_5fconfig_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ccgamec_5fconfig_2eproto();
#endif
  return *default_instance_;
}

ServerConfig* ServerConfig::default_instance_ = NULL;

ServerConfig* ServerConfig::New() const {
  return new ServerConfig;
}

void ServerConfig::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_version()) {
      if (version_ != &::google::protobuf::internal::kEmptyString) {
        version_->clear();
      }
    }
    if (has_packagename()) {
      if (packagename_ != &::google::protobuf::internal::kEmptyString) {
        packagename_->clear();
      }
    }
    if (has_baseurl()) {
      if (baseurl_ != &::google::protobuf::internal::kEmptyString) {
        baseurl_->clear();
      }
    }
    if (has_pdfile()) {
      if (pdfile_ != NULL) pdfile_->::PDFile::Clear();
    }
    predownload_ = 0;
    if (has_toolconfig()) {
      if (toolconfig_ != NULL) toolconfig_->::ToolConfig::Clear();
    }
  }
  rpfile_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool ServerConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string version = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_packagename;
        break;
      }

      // required string packagename = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_packagename:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_packagename()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_baseurl;
        break;
      }

      // required string baseurl = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_baseurl:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_baseurl()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_rpfile;
        break;
      }

      // repeated .RPFile rpfile = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rpfile:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rpfile()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_rpfile;
        if (input->ExpectTag(42)) goto parse_pdfile;
        break;
      }

      // optional .PDFile pdfile = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pdfile:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pdfile()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_predownload;
        break;
      }

      // required int32 predownload = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_predownload:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &predownload_)));
          set_has_predownload();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_toolconfig;
        break;
      }

      // optional .ToolConfig toolconfig = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_toolconfig:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_toolconfig()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ServerConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string version = 1;
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->version(), output);
  }

  // required string packagename = 2;
  if (has_packagename()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->packagename(), output);
  }

  // required string baseurl = 3;
  if (has_baseurl()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->baseurl(), output);
  }

  // repeated .RPFile rpfile = 4;
  for (int i = 0; i < this->rpfile_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->rpfile(i), output);
  }

  // optional .PDFile pdfile = 5;
  if (has_pdfile()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, this->pdfile(), output);
  }

  // required int32 predownload = 6;
  if (has_predownload()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->predownload(), output);
  }

  // optional .ToolConfig toolconfig = 7;
  if (has_toolconfig()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      7, this->toolconfig(), output);
  }

}

int ServerConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string version = 1;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->version());
    }

    // required string packagename = 2;
    if (has_packagename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->packagename());
    }

    // required string baseurl = 3;
    if (has_baseurl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->baseurl());
    }

    // optional .PDFile pdfile = 5;
    if (has_pdfile()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pdfile());
    }

    // required int32 predownload = 6;
    if (has_predownload()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->predownload());
    }

    // optional .ToolConfig toolconfig = 7;
    if (has_toolconfig()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->toolconfig());
    }

  }
  // repeated .RPFile rpfile = 4;
  total_size += 1 * this->rpfile_size();
  for (int i = 0; i < this->rpfile_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rpfile(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServerConfig::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ServerConfig*>(&from));
}

void ServerConfig::MergeFrom(const ServerConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  rpfile_.MergeFrom(from.rpfile_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_packagename()) {
      set_packagename(from.packagename());
    }
    if (from.has_baseurl()) {
      set_baseurl(from.baseurl());
    }
    if (from.has_pdfile()) {
      mutable_pdfile()->::PDFile::MergeFrom(from.pdfile());
    }
    if (from.has_predownload()) {
      set_predownload(from.predownload());
    }
    if (from.has_toolconfig()) {
      mutable_toolconfig()->::ToolConfig::MergeFrom(from.toolconfig());
    }
  }
}

void ServerConfig::CopyFrom(const ServerConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerConfig::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000027) != 0x00000027) return false;

  for (int i = 0; i < rpfile_size(); i++) {
    if (!this->rpfile(i).IsInitialized()) return false;
  }
  return true;
}

void ServerConfig::Swap(ServerConfig* other) {
  if (other != this) {
    std::swap(version_, other->version_);
    std::swap(packagename_, other->packagename_);
    std::swap(baseurl_, other->baseurl_);
    rpfile_.Swap(&other->rpfile_);
    std::swap(pdfile_, other->pdfile_);
    std::swap(predownload_, other->predownload_);
    std::swap(toolconfig_, other->toolconfig_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ServerConfig::GetTypeName() const {
  return "ServerConfig";
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
