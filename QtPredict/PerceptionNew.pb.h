// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: PerceptionNew.proto

#ifndef PROTOBUF_PerceptionNew_2eproto__INCLUDED
#define PROTOBUF_PerceptionNew_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_PerceptionNew_2eproto();
void protobuf_AssignDesc_PerceptionNew_2eproto();
void protobuf_ShutdownFile_PerceptionNew_2eproto();

class SuccInfoNew;
class NodeNew;
class PerceptionNew;

// ===================================================================

class SuccInfoNew : public ::google::protobuf::MessageLite {
 public:
  SuccInfoNew();
  virtual ~SuccInfoNew();

  SuccInfoNew(const SuccInfoNew& from);

  inline SuccInfoNew& operator=(const SuccInfoNew& from) {
    CopyFrom(from);
    return *this;
  }

  static const SuccInfoNew& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const SuccInfoNew* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(SuccInfoNew* other);

  // implements Message ----------------------------------------------

  SuccInfoNew* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const SuccInfoNew& from);
  void MergeFrom(const SuccInfoNew& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // required float cp = 2;
  inline bool has_cp() const;
  inline void clear_cp();
  static const int kCpFieldNumber = 2;
  inline float cp() const;
  inline void set_cp(float value);

  // optional bool isNext = 3;
  inline bool has_isnext() const;
  inline void clear_isnext();
  static const int kIsNextFieldNumber = 3;
  inline bool isnext() const;
  inline void set_isnext(bool value);

  // @@protoc_insertion_point(class_scope:SuccInfoNew)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_cp();
  inline void clear_has_cp();
  inline void set_has_isnext();
  inline void clear_has_isnext();

  ::google::protobuf::int32 id_;
  float cp_;
  bool isnext_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_PerceptionNew_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_PerceptionNew_2eproto();
  #endif
  friend void protobuf_AssignDesc_PerceptionNew_2eproto();
  friend void protobuf_ShutdownFile_PerceptionNew_2eproto();

  void InitAsDefaultInstance();
  static SuccInfoNew* default_instance_;
};
// -------------------------------------------------------------------

class NodeNew : public ::google::protobuf::MessageLite {
 public:
  NodeNew();
  virtual ~NodeNew();

  NodeNew(const NodeNew& from);

  inline NodeNew& operator=(const NodeNew& from) {
    CopyFrom(from);
    return *this;
  }

  static const NodeNew& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const NodeNew* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(NodeNew* other);

  // implements Message ----------------------------------------------

  NodeNew* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const NodeNew& from);
  void MergeFrom(const NodeNew& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // required uint64 uniqKey = 2;
  inline bool has_uniqkey() const;
  inline void clear_uniqkey();
  static const int kUniqKeyFieldNumber = 2;
  inline ::google::protobuf::uint64 uniqkey() const;
  inline void set_uniqkey(::google::protobuf::uint64 value);

  // repeated string keys = 3;
  inline int keys_size() const;
  inline void clear_keys();
  static const int kKeysFieldNumber = 3;
  inline const ::std::string& keys(int index) const;
  inline ::std::string* mutable_keys(int index);
  inline void set_keys(int index, const ::std::string& value);
  inline void set_keys(int index, const char* value);
  inline void set_keys(int index, const char* value, size_t size);
  inline ::std::string* add_keys();
  inline void add_keys(const ::std::string& value);
  inline void add_keys(const char* value);
  inline void add_keys(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& keys() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_keys();

  // repeated .SuccInfoNew succinfo = 4;
  inline int succinfo_size() const;
  inline void clear_succinfo();
  static const int kSuccinfoFieldNumber = 4;
  inline const ::SuccInfoNew& succinfo(int index) const;
  inline ::SuccInfoNew* mutable_succinfo(int index);
  inline ::SuccInfoNew* add_succinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::SuccInfoNew >&
      succinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::SuccInfoNew >*
      mutable_succinfo();

  // @@protoc_insertion_point(class_scope:NodeNew)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_uniqkey();
  inline void clear_has_uniqkey();

  ::google::protobuf::uint64 uniqkey_;
  ::google::protobuf::RepeatedPtrField< ::std::string> keys_;
  ::google::protobuf::RepeatedPtrField< ::SuccInfoNew > succinfo_;
  ::google::protobuf::int32 id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_PerceptionNew_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_PerceptionNew_2eproto();
  #endif
  friend void protobuf_AssignDesc_PerceptionNew_2eproto();
  friend void protobuf_ShutdownFile_PerceptionNew_2eproto();

  void InitAsDefaultInstance();
  static NodeNew* default_instance_;
};
// -------------------------------------------------------------------

class PerceptionNew : public ::google::protobuf::MessageLite {
 public:
  PerceptionNew();
  virtual ~PerceptionNew();

  PerceptionNew(const PerceptionNew& from);

  inline PerceptionNew& operator=(const PerceptionNew& from) {
    CopyFrom(from);
    return *this;
  }

  static const PerceptionNew& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const PerceptionNew* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(PerceptionNew* other);

  // implements Message ----------------------------------------------

  PerceptionNew* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const PerceptionNew& from);
  void MergeFrom(const PerceptionNew& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 nodeNum = 1;
  inline bool has_nodenum() const;
  inline void clear_nodenum();
  static const int kNodeNumFieldNumber = 1;
  inline ::google::protobuf::int32 nodenum() const;
  inline void set_nodenum(::google::protobuf::int32 value);

  // repeated .NodeNew nodes = 2;
  inline int nodes_size() const;
  inline void clear_nodes();
  static const int kNodesFieldNumber = 2;
  inline const ::NodeNew& nodes(int index) const;
  inline ::NodeNew* mutable_nodes(int index);
  inline ::NodeNew* add_nodes();
  inline const ::google::protobuf::RepeatedPtrField< ::NodeNew >&
      nodes() const;
  inline ::google::protobuf::RepeatedPtrField< ::NodeNew >*
      mutable_nodes();

  // @@protoc_insertion_point(class_scope:PerceptionNew)
 private:
  inline void set_has_nodenum();
  inline void clear_has_nodenum();

  ::google::protobuf::RepeatedPtrField< ::NodeNew > nodes_;
  ::google::protobuf::int32 nodenum_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_PerceptionNew_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_PerceptionNew_2eproto();
  #endif
  friend void protobuf_AssignDesc_PerceptionNew_2eproto();
  friend void protobuf_ShutdownFile_PerceptionNew_2eproto();

  void InitAsDefaultInstance();
  static PerceptionNew* default_instance_;
};
// ===================================================================


// ===================================================================

// SuccInfoNew

// required int32 id = 1;
inline bool SuccInfoNew::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SuccInfoNew::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SuccInfoNew::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SuccInfoNew::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 SuccInfoNew::id() const {
  return id_;
}
inline void SuccInfoNew::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// required float cp = 2;
inline bool SuccInfoNew::has_cp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SuccInfoNew::set_has_cp() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SuccInfoNew::clear_has_cp() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SuccInfoNew::clear_cp() {
  cp_ = 0;
  clear_has_cp();
}
inline float SuccInfoNew::cp() const {
  return cp_;
}
inline void SuccInfoNew::set_cp(float value) {
  set_has_cp();
  cp_ = value;
}

// optional bool isNext = 3;
inline bool SuccInfoNew::has_isnext() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SuccInfoNew::set_has_isnext() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SuccInfoNew::clear_has_isnext() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SuccInfoNew::clear_isnext() {
  isnext_ = false;
  clear_has_isnext();
}
inline bool SuccInfoNew::isnext() const {
  return isnext_;
}
inline void SuccInfoNew::set_isnext(bool value) {
  set_has_isnext();
  isnext_ = value;
}

// -------------------------------------------------------------------

// NodeNew

// required int32 id = 1;
inline bool NodeNew::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NodeNew::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NodeNew::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NodeNew::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 NodeNew::id() const {
  return id_;
}
inline void NodeNew::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// required uint64 uniqKey = 2;
inline bool NodeNew::has_uniqkey() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NodeNew::set_has_uniqkey() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NodeNew::clear_has_uniqkey() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NodeNew::clear_uniqkey() {
  uniqkey_ = GOOGLE_ULONGLONG(0);
  clear_has_uniqkey();
}
inline ::google::protobuf::uint64 NodeNew::uniqkey() const {
  return uniqkey_;
}
inline void NodeNew::set_uniqkey(::google::protobuf::uint64 value) {
  set_has_uniqkey();
  uniqkey_ = value;
}

// repeated string keys = 3;
inline int NodeNew::keys_size() const {
  return keys_.size();
}
inline void NodeNew::clear_keys() {
  keys_.Clear();
}
inline const ::std::string& NodeNew::keys(int index) const {
  return keys_.Get(index);
}
inline ::std::string* NodeNew::mutable_keys(int index) {
  return keys_.Mutable(index);
}
inline void NodeNew::set_keys(int index, const ::std::string& value) {
  keys_.Mutable(index)->assign(value);
}
inline void NodeNew::set_keys(int index, const char* value) {
  keys_.Mutable(index)->assign(value);
}
inline void NodeNew::set_keys(int index, const char* value, size_t size) {
  keys_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* NodeNew::add_keys() {
  return keys_.Add();
}
inline void NodeNew::add_keys(const ::std::string& value) {
  keys_.Add()->assign(value);
}
inline void NodeNew::add_keys(const char* value) {
  keys_.Add()->assign(value);
}
inline void NodeNew::add_keys(const char* value, size_t size) {
  keys_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
NodeNew::keys() const {
  return keys_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
NodeNew::mutable_keys() {
  return &keys_;
}

// repeated .SuccInfoNew succinfo = 4;
inline int NodeNew::succinfo_size() const {
  return succinfo_.size();
}
inline void NodeNew::clear_succinfo() {
  succinfo_.Clear();
}
inline const ::SuccInfoNew& NodeNew::succinfo(int index) const {
  return succinfo_.Get(index);
}
inline ::SuccInfoNew* NodeNew::mutable_succinfo(int index) {
  return succinfo_.Mutable(index);
}
inline ::SuccInfoNew* NodeNew::add_succinfo() {
  return succinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SuccInfoNew >&
NodeNew::succinfo() const {
  return succinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::SuccInfoNew >*
NodeNew::mutable_succinfo() {
  return &succinfo_;
}

// -------------------------------------------------------------------

// PerceptionNew

// required int32 nodeNum = 1;
inline bool PerceptionNew::has_nodenum() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PerceptionNew::set_has_nodenum() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PerceptionNew::clear_has_nodenum() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PerceptionNew::clear_nodenum() {
  nodenum_ = 0;
  clear_has_nodenum();
}
inline ::google::protobuf::int32 PerceptionNew::nodenum() const {
  return nodenum_;
}
inline void PerceptionNew::set_nodenum(::google::protobuf::int32 value) {
  set_has_nodenum();
  nodenum_ = value;
}

// repeated .NodeNew nodes = 2;
inline int PerceptionNew::nodes_size() const {
  return nodes_.size();
}
inline void PerceptionNew::clear_nodes() {
  nodes_.Clear();
}
inline const ::NodeNew& PerceptionNew::nodes(int index) const {
  return nodes_.Get(index);
}
inline ::NodeNew* PerceptionNew::mutable_nodes(int index) {
  return nodes_.Mutable(index);
}
inline ::NodeNew* PerceptionNew::add_nodes() {
  return nodes_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::NodeNew >&
PerceptionNew::nodes() const {
  return nodes_;
}
inline ::google::protobuf::RepeatedPtrField< ::NodeNew >*
PerceptionNew::mutable_nodes() {
  return &nodes_;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_PerceptionNew_2eproto__INCLUDED
