// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Template2D.proto

#ifndef PROTOBUF_Template2D_2eproto__INCLUDED
#define PROTOBUF_Template2D_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_Template2D_2eproto();
void protobuf_AssignDesc_Template2D_2eproto();
void protobuf_ShutdownFile_Template2D_2eproto();

class PathAndKey;
class PathAndKeys;

// ===================================================================

class PathAndKey : public ::google::protobuf::MessageLite {
 public:
  PathAndKey();
  virtual ~PathAndKey();

  PathAndKey(const PathAndKey& from);

  inline PathAndKey& operator=(const PathAndKey& from) {
    CopyFrom(from);
    return *this;
  }

  static const PathAndKey& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const PathAndKey* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(PathAndKey* other);

  // implements Message ----------------------------------------------

  PathAndKey* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const PathAndKey& from);
  void MergeFrom(const PathAndKey& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string path = 1;
  inline bool has_path() const;
  inline void clear_path();
  static const int kPathFieldNumber = 1;
  inline const ::std::string& path() const;
  inline void set_path(const ::std::string& value);
  inline void set_path(const char* value);
  inline void set_path(const char* value, size_t size);
  inline ::std::string* mutable_path();
  inline ::std::string* release_path();
  inline void set_allocated_path(::std::string* path);

  // required uint64 key = 2;
  inline bool has_key() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 2;
  inline ::google::protobuf::uint64 key() const;
  inline void set_key(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:PathAndKey)
 private:
  inline void set_has_path();
  inline void clear_has_path();
  inline void set_has_key();
  inline void clear_has_key();

  ::std::string* path_;
  ::google::protobuf::uint64 key_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_Template2D_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_Template2D_2eproto();
  #endif
  friend void protobuf_AssignDesc_Template2D_2eproto();
  friend void protobuf_ShutdownFile_Template2D_2eproto();

  void InitAsDefaultInstance();
  static PathAndKey* default_instance_;
};
// -------------------------------------------------------------------

class PathAndKeys : public ::google::protobuf::MessageLite {
 public:
  PathAndKeys();
  virtual ~PathAndKeys();

  PathAndKeys(const PathAndKeys& from);

  inline PathAndKeys& operator=(const PathAndKeys& from) {
    CopyFrom(from);
    return *this;
  }

  static const PathAndKeys& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const PathAndKeys* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(PathAndKeys* other);

  // implements Message ----------------------------------------------

  PathAndKeys* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const PathAndKeys& from);
  void MergeFrom(const PathAndKeys& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .PathAndKey nodes = 1;
  inline int nodes_size() const;
  inline void clear_nodes();
  static const int kNodesFieldNumber = 1;
  inline const ::PathAndKey& nodes(int index) const;
  inline ::PathAndKey* mutable_nodes(int index);
  inline ::PathAndKey* add_nodes();
  inline const ::google::protobuf::RepeatedPtrField< ::PathAndKey >&
      nodes() const;
  inline ::google::protobuf::RepeatedPtrField< ::PathAndKey >*
      mutable_nodes();

  // @@protoc_insertion_point(class_scope:PathAndKeys)
 private:

  ::google::protobuf::RepeatedPtrField< ::PathAndKey > nodes_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_Template2D_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_Template2D_2eproto();
  #endif
  friend void protobuf_AssignDesc_Template2D_2eproto();
  friend void protobuf_ShutdownFile_Template2D_2eproto();

  void InitAsDefaultInstance();
  static PathAndKeys* default_instance_;
};
// ===================================================================


// ===================================================================

// PathAndKey

// required string path = 1;
inline bool PathAndKey::has_path() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PathAndKey::set_has_path() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PathAndKey::clear_has_path() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PathAndKey::clear_path() {
  if (path_ != &::google::protobuf::internal::kEmptyString) {
    path_->clear();
  }
  clear_has_path();
}
inline const ::std::string& PathAndKey::path() const {
  return *path_;
}
inline void PathAndKey::set_path(const ::std::string& value) {
  set_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    path_ = new ::std::string;
  }
  path_->assign(value);
}
inline void PathAndKey::set_path(const char* value) {
  set_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    path_ = new ::std::string;
  }
  path_->assign(value);
}
inline void PathAndKey::set_path(const char* value, size_t size) {
  set_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    path_ = new ::std::string;
  }
  path_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PathAndKey::mutable_path() {
  set_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    path_ = new ::std::string;
  }
  return path_;
}
inline ::std::string* PathAndKey::release_path() {
  clear_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = path_;
    path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void PathAndKey::set_allocated_path(::std::string* path) {
  if (path_ != &::google::protobuf::internal::kEmptyString) {
    delete path_;
  }
  if (path) {
    set_has_path();
    path_ = path;
  } else {
    clear_has_path();
    path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required uint64 key = 2;
inline bool PathAndKey::has_key() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PathAndKey::set_has_key() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PathAndKey::clear_has_key() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PathAndKey::clear_key() {
  key_ = GOOGLE_ULONGLONG(0);
  clear_has_key();
}
inline ::google::protobuf::uint64 PathAndKey::key() const {
  return key_;
}
inline void PathAndKey::set_key(::google::protobuf::uint64 value) {
  set_has_key();
  key_ = value;
}

// -------------------------------------------------------------------

// PathAndKeys

// repeated .PathAndKey nodes = 1;
inline int PathAndKeys::nodes_size() const {
  return nodes_.size();
}
inline void PathAndKeys::clear_nodes() {
  nodes_.Clear();
}
inline const ::PathAndKey& PathAndKeys::nodes(int index) const {
  return nodes_.Get(index);
}
inline ::PathAndKey* PathAndKeys::mutable_nodes(int index) {
  return nodes_.Mutable(index);
}
inline ::PathAndKey* PathAndKeys::add_nodes() {
  return nodes_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PathAndKey >&
PathAndKeys::nodes() const {
  return nodes_;
}
inline ::google::protobuf::RepeatedPtrField< ::PathAndKey >*
PathAndKeys::mutable_nodes() {
  return &nodes_;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Template2D_2eproto__INCLUDED
